<?xml version="1.0" encoding="UTF-8"?>

<report title="MNHNL Reptile Download Report" description="Lists all occurrences associated with saved samples. Normally invoked from Reports tab on the form.">
  <params>
    <param name='survey_id' display='Survey: ' description='Select the survey to return data for:' datatype='lookup'
        query='SELECT id, title as caption FROM surveys' />
    <param name='taxon_list_id' display='Taxon_list_id: ' description='Select the taxon_list to look up taxa in:' datatype='lookup'
        query='SELECT id, title as caption FROM taxon_lists' />
    <param name='target_species' display='Target Species: ' description='Select the target species to return data for:' datatype='int' />
  </params>
  <table tablename="samples" where="#this#.deleted = FALSE
      and #this#.parent_id IS NULL
      and #this#.survey_id = #survey_id#" >
    <tabColumn name='id' display='Survey ID' visible='true'/>
    <tabColumn name='recorder_names' display='Recorder names' />
    <tabColumn name='date_start' visible='false'/>
    <tabColumn name='date_end' visible='false'/>
    <tabColumn name='date_type' visible='false'/>
    <tabColumn name='date' func="''" display='Visit date'/> // dummy field for the vague date processing, here so appears at logical position and with reasonable description in the report
    <subTable tablename="locations" > // allow deleted Sites!
      <subTable tablename="locations" parentKey="parent_id" where="#this#.deleted = FALSE" >
        <tabColumn name='name' display='Square (5x5km)'/>
      </subTable>
      <tabColumn name='id' visible='true' display='Location ID' />
      <tabColumn name='name' display='Site'/>
      <tabColumn name='xy' display='XY centroid' func="(replace(#this#.centroid_sref, ',' , ''))" />
      <tabColumn name='points' display='XY point coordinates' func="(CASE
     WHEN #this#.boundary_geom is null THEN (replace(#this#.centroid_sref, ',' , ''))
     WHEN GeometryType(#this#.boundary_geom) = 'POINT' THEN regexp_replace(ST_AsText(ST_Transform(#this#.boundary_geom,2169)),'[(){}\\x22]|\\.[0-9]*|POINT','','g')
     WHEN GeometryType(#this#.boundary_geom) = 'MULTIPOINT' THEN regexp_replace(ST_AsText(ST_Transform(#this#.boundary_geom,2169)),'[(){}\\x22]|\\.[0-9]*|MULTIPOINT','', 'g')
     WHEN GeometryType(#this#.boundary_geom) = 'GEOMETRYCOLLECTION' AND NOT ST_IsEmpty(ST_CollectionExtract(#this#.boundary_geom, 1)) THEN regexp_replace(ST_AsText(ST_Transform(ST_CollectionExtract(#this#.boundary_geom,1),2169)),'[(){}\\x22]|\\.[0-9]*|MULTIPOINT','', 'g')
     ELSE ''
END)" />
      <tabColumn name='lines' display='XY line coordinates' func="(CASE
     WHEN GeometryType(#this#.boundary_geom) = 'LINESTRING'
       THEN regexp_replace(ST_AsText(ST_Transform(ST_Centroid(#this#.boundary_geom),2169)),'[(){}\\x22]|\\.[0-9]*|POINT','','g')
     WHEN GeometryType(#this#.boundary_geom) = 'MULTILINESTRING'
       THEN regexp_replace(array(SELECT ST_AsText(ST_Transform(st_centroid((ST_dump(xl.boundary_geom)).geom),2169)) FROM locations xl where xl.id = #this#.id )::text,'[(){}\\x22]|\\.[0-9]*|POINT','', 'g')
     WHEN GeometryType(#this#.boundary_geom) = 'GEOMETRYCOLLECTION' AND NOT ST_IsEmpty(ST_CollectionExtract(#this#.boundary_geom, 2))
       THEN regexp_replace(array(SELECT ST_AsText(st_transform(st_centroid((ST_dump(ST_CollectionExtract(xl2.boundary_geom,2))).geom),2169)) FROM locations xl2 where xl2.id = #this#.id )::text,'[(){}\\x22]|\\.[0-9]*|POINT','', 'g')
     ELSE ''
END)" />
      <tabColumn name='polygons' display='XY polygon coordinates' func="(CASE
     WHEN GeometryType(#this#.boundary_geom) = 'POLYGON'
       THEN regexp_replace(ST_AsText(ST_Transform(ST_Centroid(#this#.boundary_geom),2169)),'[(){}\\x22]|\\.[0-9]*|POINT','','g')
     WHEN GeometryType(#this#.boundary_geom) = 'MULTIPOLYGON'
       THEN regexp_replace(array(SELECT ST_AsText(ST_Transform(st_centroid((ST_dump(xl.boundary_geom)).geom),2169)) FROM locations xl where xl.id = #this#.id )::text,'[(){}\\x22]|\\.[0-9]*|POINT','', 'g')
     WHEN GeometryType(#this#.boundary_geom) = 'GEOMETRYCOLLECTION' AND NOT ST_IsEmpty(ST_CollectionExtract(#this#.boundary_geom, 3))
       THEN regexp_replace(array(SELECT ST_AsText(st_transform(st_centroid((ST_dump(ST_CollectionExtract(xl2.boundary_geom,3))).geom),2169)) FROM locations xl2 where xl2.id = #this#.id )::text,'[(){}\\x22]|\\.[0-9]*|POINT','', 'g')
     ELSE ''
END)" />
    </subTable>
    <attributes separator='|' meaningIdLanguage='preferred'/>
    <subTable tablename="samples" tableKey="parent_id" parentKey="id" where="#this#.deleted = FALSE" >
      <subTable tablename="sample_attribute_values" tableKey="sample_id" parentKey="id" where="#this#.deleted = FALSE and #this#.int_value = #target_species# " >
      </subTable>
      <attributes separator='|' meaningIdLanguage='preferred'/>
    </subTable>
    <subTable tablename="occurrences" parentKey="id" where=" #this#.deleted = FALSE" join="LEFT OUTER" >
      <tabColumn name='id' visible='true' display='Occurrence ID' />
      <tabColumn name='comment' display='Occurrence comment' />
      <subTable tablename='taxa_taxon_lists' join="LEFT OUTER" >
        <subTable tablename='taxa_taxon_lists' parentKey="taxon_meaning_id" tableKey="taxon_meaning_id" where="#this#.preferred = TRUE AND #this#.taxon_list_id = #taxon_list_id#" join="LEFT OUTER" >
          <subTable tablename='taxa' join="LEFT OUTER" >
            <tabColumn name='taxon' display='Species'/>
          </subTable>
        </subTable>
      </subTable>
      <attributes separator='|'  meaningIdLanguage='preferred'/> 
    </subTable>    
  </table>
  <order_bys>
    <order_by>lt0_id ASC, lt3_id ASC</order_by>
  </order_bys>
</report>
