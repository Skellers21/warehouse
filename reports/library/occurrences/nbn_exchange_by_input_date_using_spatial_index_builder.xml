<report
    title="NBN Exchange format by input date, spatial indexed"
    description="An extract of records in a format suitable for creating NBN Exchange format files in combination with the nbn output format, filtered by input date.
        Requires the spatial index builder for location filters."
>
  <query>
select #columns#
from cache_occurrences co
join occurrences o on o.id=co.id -- ensure we have the latest status. Would not be needed if cache_occurrences reflects updated immediately
join samples s on s.id=o.sample_id
left join (index_locations_samples ils
  join locations l on l.id=ils.location_id
  join cache_termlists_terms ctt on ctt.id=l.location_type_id and ctt.term='Vice County'
) on ils.sample_id=co.sample_id
#agreements_join#
#joins#
where #sharing_filter# 
and co.date_type in ('D','DD','O','OO','Y','YY','-Y','U') 
and (#ownData#=0 or CAST(co.created_by_id as character varying)='#currentUser#')
and (s.entered_sref_system ilike 'osgb' or s.entered_sref_system ilike 'osie' or s.entered_sref_system = '4326' or s.entered_sref_system = '27700')
and (trim('#date_from#')='' or '#date_from#'='Click here' 
    or o.created_on &gt;= CAST(COALESCE('#date_from#','1500-01-01') as date) or o.updated_on &gt;= CAST(COALESCE('#date_from#','1500-01-01') as date) )
and (trim('#date_to#')='' or '#date_to#'='Click here' 
    or o.created_on &lt;= CAST(COALESCE('#date_to#','1500-01-01') as date) or o.updated_on &lt;= CAST(COALESCE('#date_to#','1500-01-01') as date) )
and quality_check('#quality#', co.record_status, co.certainty)=true
and co.taxa_taxon_list_external_key is not null
 
  </query>
  
  <order_bys>
    <order_by>co.id ASC</order_by>
  </order_bys>
  <params>
    <param name='date_from' display='Date From' datatype='date' description="Filter by record added or updated date" />
    <param name='date_to' display='Date To' datatype='date' description="Filter by record added or updated date" />
    <param name='quality' display='Data quality' description='Quality level required of data to be included in the map.' datatype='lookup' 
            lookup_values='V:Data must be verified,C:Data must be verified or certain,L:Data must be at least likely,!D:Include anything not dubious or rejected,!R:Include anything not rejected' />
    <param name='smpattrs' display='Sample attribute list' description='Comma separated list of sample attribute IDs to include' datatype='smpattrs' />
    <param name='occattrs' display='Occurrence attribute list' description='Comma separated list of occurrence attribute IDs to include' datatype='occattrs' />
    <param name="currentUser" display="Current User ID" description="Current user's warehouse ID. Allows a column to be output indicating that the user owns the record." datatype="text" />
    <param name="ownData" display="My data only?" datatype="checkbox" />
    <param name='location_id' display='Location' description='Provide the location to display records for' datatype='lookup' emptyvalue="0"
        population_call='direct:location:id:name' />
    <param name="ownLocality" display="My locality only?" datatype="checkbox">
      <join value="1">JOIN index_locations_samples lfilter ON lfilter.sample_id=o.sample_id and lfilter.location_id=#location_id#</join>  
    </param>
    <param name="taxon_groups" display="Taxon Groups" description="List of taxon group IDs to view data for" datatype="text" emptyvalue="0"/>
    <param name="ownGroups" display="My species groups only?" datatype="checkbox">      
      <join value="1">JOIN taxon_groups tgfilter ON tgfilter.id=co.taxon_group_id AND tgfilter.id IN (#taxon_groups#)</join>
    </param>
    <param name="surveys" display="Surveys" description="List of survey IDs to view data for" datatype="text" emptyvalue="0"/>
    <param name="ownSurveys" display="My surveys only?" datatype="checkbox">      
      <join value="1">JOIN surveys su ON su.id=co.survey_id AND su.id IN (#surveys#)</join>
    </param>
  </params>
  <columns>
    <column name='id' display='ID' sql="co.id" datatype="integer" visible="false" />
    <column name='recordkey' display='RecordKey' sql="'iBRC' || co.id" datatype="text" />
    <column name='surveykey' display='SurveyKey' sql='co.survey_id' datatype="integer" />
    <column name='samplekey' display='SampleKey' sql='co.sample_id' datatype="integer" />
    <column name='taxonversionkey' display='TaxonVersionKey' sql='co.taxa_taxon_list_external_key' datatype="text" />
    <column name='zeroabundance' display='ZeroAbundance' sql='upper(cast (co.zero_abundance as character))' datatype="text" />
    <column name='sensitive' display='Sensitive' sql="case o.sensitivity_precision when null then 'f' else 't' end" datatype="text" />
    <column name='startdate' display='StartDate' sql='cast(co.date_start as character varying)' datatype="text" />
    <column name='enddate' display='EndDate' sql='cast(co.date_end as character varying)' datatype="text" />
    <column name='datetype' display='DateType' sql='co.date_type' datatype="integer" />
    <column name='sitekey' display='SiteKey' sql='s.location_id' datatype="integer" />
    <column name='sitename' display='SiteName' sql='co.location_name' datatype="text" />
    <column name='gridreference' display='GridReference' sql="case s.entered_sref_system when '4326' then null else replace(s.entered_sref, ' ', '') end" datatype="text" />
    <column name='east' display='East' sql="substring(st_astext(st_transform(geom, 4326)) from E'POINT\\((.+) ')" datatype="text" />
    <column name='north' display='North' sql="substring(st_astext(st_transform(geom, 4326)) from E'POINT\\(.+ (.+)\\)')" datatype="text" />
    <column name='projection' display='Projection' 
        sql="case s.entered_sref_system when '4326' then 'WGS84' when '27700' then 'OSGB36' else upper(s.entered_sref_system) end" 
        datatype="text" />
    <column name='precision' display='Precision' 
        sql="case s.entered_sref_system
    when '4326' then 50 
    when '27700' then 1
    else case length(replace(s.entered_sref, ' ', '')) when 5 then 2000 else pow(10, (12-length(replace(s.entered_sref, ' ', '')))/2) end
  end" 
        datatype="text" />
    <column name="vicecounty" display="ViceCounty" sql="array_to_string(array_agg(l.name), ', ')" datatype="text" aggregate="true" />        
    <column name='recorder' display='Recorder' sql='co.recorders' datatype="text" />
    <column name='verifier' display='Verifier' sql='co.verifier' datatype="text" />
        
  </columns>
</report>